// Generated by CoffeeScript 1.10.0
(function() {
  var TransInterpolator, Transposer;

  Transposer = require('transposer');

  module.exports = TransInterpolator = (function() {

    /*
        @param data {Object}
        @param options {Object} (Optional)
     */
    function TransInterpolator(data, options) {
      var key, val;
      this.data = data != null ? data : {};
      if (options) {
        for (key in options) {
          val = options[key];
          this[key] = val;
        }
      }
      this.openLength = this.open.length;
      this.closeLength = this.close.length;
      this.transposer = new Transposer(this.data);
    }

    TransInterpolator.prototype.open = '${';

    TransInterpolator.prototype.close = '}';

    TransInterpolator.prototype.depth = 8;


    /*
        Interpolates a string.
    
        @param expression {String}
        @param valueFn {Function} (Optional)
        @param depth {Number} (Optional)
     */

    TransInterpolator.prototype.interpolate = function(expression, transform, depth) {
      var chars, closeEnd, closeStart, e, escapedCloseAt, escapedOpenAt, findClose, lastOpen, openEnd, openStart, resolved, value;
      if (transform == null) {
        transform = this.transform;
      }
      if (depth == null) {
        depth = this.depth;
      }
      e = expression;
      lastOpen = expression.length;
      findClose = (function(_this) {
        return function(fromIndex) {
          var closeStart;
          closeStart = e.indexOf(_this.close, fromIndex);
          if (closeStart < 0) {
            return closeStart;
          }
          if (e[closeStart - 1] === '\\') {
            return findClose(closeStart + 1);
          }
          return closeStart;
        };
      })(this);
      while ((openStart = e.lastIndexOf(this.open, lastOpen)) > -1) {
        openEnd = openStart + this.openLength;
        lastOpen = openStart;
        if (e[openStart - 1] === '\\') {
          lastOpen = lastOpen - 1;
          continue;
        }
        closeStart = findClose(openEnd);
        if (closeStart < 0) {
          throw new Error("Missing close tag after open at `" + openStart + "`");
        }
        closeEnd = closeStart + this.closeLength;
        value = e.slice(openEnd, closeStart).trim();
        if ((escapedCloseAt = value.indexOf("\\" + this.close)) > -1) {
          value = value.split('');
          value.splice(escapedCloseAt, 1);
          value = value.join('');
        }
        if ((escapedOpenAt = value.indexOf("\\" + this.open)) > -1) {
          value = value.split('');
          value.splice(escapedOpenAt, 1);
          value = value.join('');
        }
        resolved = this.transposer.get(value);
        if (typeof resolved === 'function') {
          resolved = resolved(resolved, value, expression);
        }
        resolved += '';
        if (depth > 0 && (resolved.lastIndexOf(this.open)) > -1) {
          resolved = this.interpolate(resolved, transform, depth - 1);
        }
        if (transform) {
          resolved = transform(resolved, value, expression);
        }
        chars = e.split('');
        chars.splice(openStart, closeEnd - openStart, resolved);
        e = chars.join('');
      }
      return e;
    };

    return TransInterpolator;

  })();

}).call(this);
