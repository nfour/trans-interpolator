// Generated by CoffeeScript 1.12.7
(function() {
  var TransInterpolator, data, unit,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TransInterpolator = require('../TransInterpolator');

  unit = require('nodeunit');

  console.inspect = function(val) {
    return console.log(require('util').inspect(val, {
      depth: 5,
      colors: true,
      hidden: true
    }));
  };

  data = {
    variable: {
      here: function() {
        return '${ variable.is.b3 }1';
      },
      is: {
        b2: 100,
        b3: 'wowo'
      }
    },
    some: {
      thing: 'b2'
    }
  };

  exports['from string to function to string'] = function(test) {
    var actual, expected, interpolator;
    interpolator = new TransInterpolator(data);
    expected = "blah blah wowo1";
    actual = interpolator.interpolate("blah blah ${variable.here}");
    test.equal(actual, expected);
    return test.done();
  };

  exports['nested string with interpolated key'] = function(test) {
    var actual, expected, interpolator;
    interpolator = new TransInterpolator(data);
    expected = "blah blah b2 100";
    actual = interpolator.interpolate("blah blah ${ some.thing } ${ variable.is['${ some.thing }'] }", function(val) {
      return val;
    });
    test.equal(actual, expected);
    return test.done();
  };

  exports['uses different open and close tags'] = function(test) {
    var CustomTransInterp, actual, expected, interpolator;
    CustomTransInterp = (function(superClass) {
      extend(CustomTransInterp, superClass);

      function CustomTransInterp() {
        return CustomTransInterp.__super__.constructor.apply(this, arguments);
      }

      CustomTransInterp.prototype.open = '{{';

      CustomTransInterp.prototype.close = '}}';

      return CustomTransInterp;

    })(TransInterpolator);
    interpolator = new CustomTransInterp({
      variable: {
        here: function() {
          return '{{ variable.is.b3 }}1';
        },
        is: {
          "{{ b2 }}": 100,
          b3: 'wowo'
        }
      },
      some: {
        thing: 'b2'
      }
    });
    expected = "blah blah wowo1 100";
    actual = interpolator.interpolate("blah blah {{ variable.here }} {{ variable.is['\\{{ {{ some.thing }} \\}}'] }}", function(val) {
      return val;
    });
    test.equal(actual, expected);
    return test.done();
  };

}).call(this);
